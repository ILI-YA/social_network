{"version":3,"sources":["components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","utilits/validators.js","components/Login/Login.jsx"],"names":["FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","component","validators","name","placeholder","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","formSummaryError","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"iRAIMA,EAAc,SAAC,GAA+C,EAA9CC,MAA+C,IAAD,IAAvCC,KAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAQC,EAAe,EAAfA,SAC3CC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAEC,YAAc,KAAQH,EAAWE,IAAEJ,MAAQ,KAA7D,UACI,8BACKC,IAEHC,GAAY,+BAAOF,QAOpBM,EAAW,SAACC,GAAW,IACxBV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MADU,YACcF,EADd,2BAE/B,OAAO,cAACX,EAAD,2BAAiBW,GAAjB,aAAyB,oDAAcV,GAAWW,QAGhDE,EAAQ,SAACH,GAAW,IACrBV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MADO,YACiBF,EADjB,2BAE5B,OAAO,cAACX,EAAD,2BAAiBW,GAAjB,aAAyB,iDAAWV,GAAWW,QAG7CG,EAAc,SAAGC,EAAWC,EAAYC,EAAMC,GAAqC,IAAxBR,EAAuB,uDAAjB,GAAIS,EAAa,uDAAR,GACnF,OAAO,gCACH,cAAC,IAAD,aAAOJ,UAAWA,EACdK,SAAUJ,EACVC,KAAMA,EACNC,YAAaA,GACTR,IALL,IAMKS,O,oBClChBE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCNlC,2FA8BME,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EArBL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAc5B,EAAuB,EAAvBA,MAAO6B,EAAgB,EAAhBA,WACrC,OACI,uBAAMC,SAAWF,EAAjB,UACMjB,YAAYD,IAAO,CAACU,KAAW,QAAS,SACxCT,YAAYD,IAAO,CAACU,KAAW,WAAY,WAAY,CAACW,KAAM,aAC9DpB,YAAYD,IAAO,GAAI,aAAc,KAAM,CAACqB,KAAM,YAAa,eAE/DF,GAAc,qBAAKG,IAAKH,EAAYI,IAAI,YACxCJ,GAAclB,YAAYD,IAAO,CAACU,KAAW,UAAW,sBAGxDpB,GAAS,qBAAKG,UAAWC,IAAE8B,iBAAlB,SACP,4BAAKlC,MAET,8BACI,mDA2BDmC,uBALS,SAACC,GAAD,MAAY,CAChCP,WAAYO,EAAMC,KAAKR,WACvBS,OAAQF,EAAMC,KAAKC,UAGiB,CAACC,WAA1BJ,EAnBD,SAAC5B,GAKX,OAAIA,EAAM+B,OACC,cAAC,IAAD,CAAUE,GAAG,aAEjB,gCACH,uCACA,cAACf,EAAD,CAAgBK,SATH,SAACW,GACdlC,EAAMgC,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAQzChB,WAAYtB,EAAMsB","file":"static/js/7.c50c5874.chunk.js","sourcesContent":["import React from 'react';\nimport { Field } from 'redux-form';\nimport s from './FormsControls.module.css';\n\nconst FormControl = ({input, meta: {touched, error}, children }) => {\n    const hasError = touched && error;\n    return (\n        <div className={s.formControl + ' ' + ( hasError ? s.error : ' ')}>\n            <div>\n                {children}\n            </div>\n            { hasError && <span>{error}</span> }\n        </div>\n    )\n\n}\n\n\nexport const Textarea = (props) => {\n    const { input, meta, child, ...restProps } = props;\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input = (props) => {\n    const { input, meta, child, ...restProps } = props;\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\n}\n\nexport const createField = (  component, validators, name, placeholder, props={}, text='' ) => {\n    return <div>\n        <Field component={component} \n            validate={validators} \n            name={name} \n            placeholder={placeholder} \n            {...props}\n            /> {text}\n    </div>\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\"};","export const required = (value) => {\n    if (value) return undefined;\n    return 'Filed is required';\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form';\nimport { required } from '../../utilits/validators';\nimport { createField, Input } from '../common/FormsControls/FormsControls';\nimport { login } from '../../redux/reducers/auth-reducers';\nimport { Redirect } from 'react-router';\nimport s from '../common/FormsControls/FormsControls.module.css';\n\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={ handleSubmit }>\n            { createField(Input, [required], 'email', 'Email') }\n            { createField(Input, [required], 'password', 'Password', {type: 'password'}) }\n            { createField(Input, [], 'rememberMe', null, {type: 'checkbox'}, 'remember me') }\n\n            { captchaUrl && <img src={captchaUrl} alt='captcha' /> }\n            { captchaUrl && createField(Input, [required], 'captcha', 'Symbols from image')}\n\n\n            { error && <div className={s.formSummaryError}>\n                <p>{ error }</p>\n            </div> }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm({ form: 'login' }) (LoginForm);\n\nconst Login = (props) => {\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n\n    if (props.isAuth) {\n        return <Redirect to='/profile' />\n    }\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n    </div>\n}\n\nconst mapStateToProps = (state) => ({\n    captchaUrl: state.auth.captchaUrl,\n    isAuth: state.auth.isAuth\n})\n\nexport default connect(mapStateToProps, {login}) (Login);"],"sourceRoot":""}